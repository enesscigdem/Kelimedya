@model Kelimedya.WebApp.Models.ScoreInfoViewModel

<!-- Score Info Container -->
<div class="flex items-center space-x-3">
    <!-- League Display -->
    <div class="league-display-container @GetLeagueCssClass(Model.League) flex items-center px-4 py-2 rounded-full shadow-sm transition-all duration-200 hover:shadow-md hover:-translate-y-0.5">
        <span class="league-icon mr-2">
            <i class="@GetLeagueIcon(Model.League) text-lg"></i>
        </span>
        <span id="leagueLabel" class="font-semibold text-sm">@Model.League</span>
    </div>
    
    <!-- Score Display -->
    <div class="score-display-container flex items-center px-4 py-2 bg-gradient-to-r from-yellow-100 to-yellow-50 border-2 border-yellow-300 rounded-full shadow-sm transition-all duration-200 hover:shadow-md hover:-translate-y-0.5">
        <span class="score-icon mr-2">
            <i class="fas fa-award text-yellow-600 text-lg"></i>
        </span>
        <span id="scorePoints" class="font-bold text-yellow-800 text-sm">@Model.TotalScore</span>
    </div>
</div>

<!-- Doğru cevap sesi -->
<audio id="correctAudio" src="@Url.Content("~/audio/correct.mp3")" preload="auto"></audio>

<!-- Tam Ekran Kutlama Animasyonu -->
<div id="leaguePromotion" class="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 hidden items-center justify-center">
    <canvas id="confettiCanvas" class="absolute inset-0 pointer-events-none"></canvas>
    
    <div class="relative bg-white rounded-3xl p-8 max-w-md mx-4 text-center shadow-2xl transform scale-95 opacity-0 transition-all duration-200" id="promotionContent">
        <!-- Trophy Icon -->
        <div class="promotion-icon mb-6">
            <div class="w-24 h-24 mx-auto bg-gradient-to-br from-yellow-400 to-yellow-600 rounded-full flex items-center justify-center shadow-lg animate-bounce">
                <i class="fas fa-trophy text-white text-4xl"></i>
            </div>
            <div class="absolute inset-0 w-24 h-24 mx-auto bg-yellow-300 rounded-full opacity-30 animate-ping"></div>
        </div>
        
        <!-- Title -->
        <h2 class="text-3xl font-bold text-gray-900 mb-4 animate-pulse">TEBRİKLER!</h2>
        
        <!-- Message -->
        <p class="text-lg text-gray-600 mb-6">
            Lig atladınız: <span id="newLeague" class="inline-block px-3 py-1 rounded-full font-bold"></span>
        </p>
        
        <!-- Stars -->
        <div class="flex justify-center space-x-2 mb-6">
            <div class="w-3 h-3 bg-yellow-400 rounded-full animate-twinkle"></div>
            <div class="w-3 h-3 bg-yellow-400 rounded-full animate-twinkle" style="animation-delay: 0.2s;"></div>
            <div class="w-3 h-3 bg-yellow-400 rounded-full animate-twinkle" style="animation-delay: 0.4s;"></div>
        </div>
        
        <!-- Close Button -->
        <button class="btn-close-promotion bg-gradient-to-r from-blue-500 to-blue-600 text-white px-8 py-3 rounded-full font-semibold hover:from-blue-600 hover:to-blue-700 transition-all duration-200 transform hover:scale-105 shadow-lg">
            Devam Et
        </button>
    </div>
</div>

<style>
/* League Colors */
.league-display-container.Bronz {
    @@apply bg-gradient-to-r from-orange-200 to-orange-100 border-2 border-orange-400 text-orange-800;
}

.league-display-container.Gümüş {
    @@apply bg-gradient-to-r from-gray-200 to-gray-100 border-2 border-gray-400 text-gray-700;
}

.league-display-container.Altın {
    @@apply bg-gradient-to-r from-yellow-200 to-yellow-100 border-2 border-yellow-400 text-yellow-800;
}

/* Animations */
@@keyframes twinkle {
    0%, 100% { opacity: 0.3; transform: scale(0.8); }
    50% { opacity: 1; transform: scale(1.2); }
}

.animate-twinkle {
    animation: twinkle 1.5s infinite ease-in-out;
}

/* Promotion Styles */
.promotion-show #promotionContent {
    transform: scale(1);
    opacity: 1;
}
</style>

<script>
// Global değişkenler
let currentLeague = '@Model.League';
let currentScore = @Model.TotalScore;
let shownPromotionFor = localStorage.getItem('shownLeague') || '';
let confettiAnimation = null;

// Puan güncelleme fonksiyonu
window.updateScoreDisplay = function(newScore) {
    const scoreEl = document.getElementById('scorePoints');
    const leagueEl = document.getElementById('leagueLabel');
    const container = document.querySelector('.league-display-container');
    
    if (!scoreEl || !leagueEl || !container) return;
    
    // Yeni ligi hesapla
    let newLeague = newScore >= 6000 ? 'Altın'
                  : newScore >= 2500 ? 'Gümüş'
                  : 'Bronz';
    
    // Puanı güncelle
    scoreEl.textContent = newScore;
    
    // Lig değiştiyse
    if (newLeague !== currentLeague) {
        // Yazıyı güncelle
        leagueEl.textContent = newLeague;
        
        // CSS sınıfını güncelle
        container.className = `league-display-container ${newLeague} flex items-center px-4 py-2 rounded-full shadow-sm transition-all duration-200 hover:shadow-md hover:-translate-y-0.5`;
        
        // İkonu güncelle
        const icon = container.querySelector('.league-icon i');
        icon.className = getLeagueIcon(newLeague) + ' text-lg';
        
        const applause = document.getElementById('applauseAudio');
        if (applause) {
            applause.currentTime = 0;
            applause.play();
        }
        
        if (shownPromotionFor !== newLeague) {
            showPromotionAnimation(currentLeague, newLeague);
            shownPromotionFor = newLeague;
            localStorage.setItem('shownLeague', newLeague);
        }
        
        currentLeague = newLeague;
    }
};

// Konfeti sistemi
class ConfettiSystem {
    constructor(canvas) {
        this.canvas = canvas;
        this.ctx = canvas.getContext('2d');
        this.particles = [];
        this.particleCount = 150;
        this.colors = [
            '#FF5252', '#FF4081', '#E040FB', '#7C4DFF', '#536DFE',
            '#448AFF', '#40C4FF', '#18FFFF', '#64FFDA', '#69F0AE',
            '#B2FF59', '#EEFF41', '#FFFF00', '#FFD740', '#FFAB40'
        ];
        this.resize();
        window.addEventListener('resize', this.resize.bind(this));
    }
    
    resize() {
        this.canvas.width = window.innerWidth;
        this.canvas.height = window.innerHeight;
    }
    
    createParticles() {
        for (let i = 0; i < this.particleCount; i++) {
            this.particles.push({
                x: Math.random() * this.canvas.width,
                y: Math.random() * this.canvas.height - this.canvas.height,
                size: Math.random() * 8 + 4,
                color: this.colors[Math.floor(Math.random() * this.colors.length)],
                speed: Math.random() * 3 + 2,
                angle: Math.random() * Math.PI * 2,
                rotation: Math.random() * 0.2 - 0.1,
                alpha: 0.9,
                wind: Math.random() * 0.5 - 0.25
            });
        }
    }
    
    updateParticles() {
        for (let i = 0; i < this.particles.length; i++) {
            const p = this.particles[i];
            p.y += p.speed;
            p.x += Math.sin(p.angle) * 1 + p.wind;
            p.angle += p.rotation;
            
            if (p.y > this.canvas.height) {
                p.y = -10;
                p.x = Math.random() * this.canvas.width;
            }
        }
    }
    
    drawParticles() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        
        for (let i = 0; i < this.particles.length; i++) {
            const p = this.particles[i];
            this.ctx.save();
            this.ctx.translate(p.x, p.y);
            this.ctx.rotate(p.angle);
            this.ctx.globalAlpha = p.alpha;
            this.ctx.fillStyle = p.color;
            
            this.ctx.beginPath();
            this.ctx.arc(0, 0, p.size / 2, 0, Math.PI * 2);
            this.ctx.fill();
            
            this.ctx.restore();
        }
    }
    
    animate() {
        this.updateParticles();
        this.drawParticles();
        this.animationId = requestAnimationFrame(this.animate.bind(this));
    }
    
    start() {
        this.createParticles();
        this.animate();
    }
    
    stop() {
        cancelAnimationFrame(this.animationId);
        this.particles = [];
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
}

// Animasyon göster
window.showPromotionAnimation = function(oldLeague, newLeague) {
    const overlay = document.getElementById('leaguePromotion');
    const newLeagueEl = document.getElementById('newLeague');
    const canvas = document.getElementById('confettiCanvas');
    
    if (!overlay) return;
    
    // İçeriği güncelle
    newLeagueEl.textContent = newLeague;
    newLeagueEl.className = `inline-block px-3 py-1 rounded-full font-bold league-display-container ${newLeague}`;
    
    // Göster
    overlay.classList.remove('hidden');
    overlay.classList.add('flex', 'promotion-show');
    
    // Animasyonları başlat
    confettiAnimation = new ConfettiSystem(canvas);
    confettiAnimation.start();
    
    // Kapatma butonu
    const closeBtn = document.querySelector('.btn-close-promotion');
    closeBtn.onclick = () => {
        overlay.classList.add('hidden');
        overlay.classList.remove('flex', 'promotion-show');
        confettiAnimation.stop();
    };
    
    // 8 saniye sonra otomatik kapat
    setTimeout(() => {
        if (!overlay.classList.contains('hidden')) {
            overlay.classList.add('hidden');
            overlay.classList.remove('flex', 'promotion-show');
            confettiAnimation.stop();
        }
    }, 8000);
};

// Yardımcı fonksiyon
function getLeagueIcon(league) {
    switch (league) {
        case 'Bronz':
            return 'fas fa-medal';
        case 'Gümüş':
            return 'fas fa-medal';
        case 'Altın':
            return 'fas fa-trophy';
        default:
            return 'fas fa-medal';
    }
}
</script>

@functions {
    string GetLeagueCssClass(string league) => league switch {
        "Bronz" => "Bronz",
        "Gümüş" => "Gümüş", 
        "Altın" => "Altın",
        _ => ""
    };
    
    string GetLeagueIcon(string league) => league switch {
        "Bronz" => "fas fa-medal",
        "Gümüş" => "fas fa-medal",
        "Altın" => "fas fa-trophy",
        _ => "fas fa-medal"
    };
}
