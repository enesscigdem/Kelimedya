@{
    Layout = "~/Areas/Student/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Kabarcık Harfler Oyunu";
}
<link href="~/css/BubbleLetters.css" rel="stylesheet" />

<div class="container-xl" style="margin-top:1rem;">
  <div class="fullscreen-container">
    <header class="bl-header">
      <h1>Kabarcık Harfler</h1>
      <p>Doğru kelimeyi oluşturmak için baloncuklara tıklayın veya klavyenizle yazın.</p>
    </header>

    <div class="bl-gamecard">

      <div class="bl-hint">
        <div class="hint-line">
          <strong>Eş anlamı:</strong> <span id="hintSynonym"></span>
        </div>
        <div class="hint-line">
          <strong>Anlamı:</strong> <span id="hintDefinition"></span>
        </div>
        <div class="hint-line">
          <strong>Cümle:</strong> <em id="hintSentence"></em>
        </div>
      </div>

      <div class="bl-target" id="targetSlots">
        <!-- JS ile doldurulacak -->
      </div>

      <div class="bl-bubbles" id="bubblesArea">
        <!-- Harf baloncukları JS ile oluşturulacak -->
      </div>

      <div class="bl-controls">
        <button id="blClear" class="bl-btn secondary">Temizle</button>
        <button id="blSubmit" class="bl-btn">Kontrol Et</button>
        <button id="blReveal" class="bl-btn secondary">Cevabı Göster</button>
      </div>

      <div class="bl-feedback" id="blFeedback"></div>

      <div class="bl-footer">
        <button onclick="location.href='@Url.Action("Index","Games", new { area = "Student" })'" class="bl-btn secondary">
          Geri Dön
        </button>
        <button id="blNext" class="bl-btn">Sonraki</button>
      </div>
    </div>
  </div>
</div>

@section Scripts {
  <script>
  const wordCards = [
    {
      word: "başarmak",
      synonym: "Muvaffak Olmak",
      definition: "İstenen sonuca ulaşmak, başarılı olmak.",
      sentence: "Düzenli çalışmak, sınavda başarılı olmanın anahtarıdır."
    },
    {
      word: "planlamak",
      synonym: "Tasarlamak",
      definition: "Bir işi önceden düzenlemek, hazırlamak.",
      sentence: "Sınav tarihine göre ders programını planlamak çok önemlidir."
    },
    {
      word: "dikkat etmek",
      synonym: "Itina Göstermek",
      definition: "Özen göstermek, önemsemek.",
      sentence: "Sınavda soruları dikkatlice okuyun."
    }
  ];

  let cardIdx = 0,
      answer = "",
      filled = [],
      letters = [],
      history = [];

  function shuffle(a) {
    for (let i = a.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [a[i], a[j]] = [a[j], a[i]];
    }
  }

  function loadCard() {
    const card = wordCards[cardIdx];
    answer = card.word.replace(/\s+/g, "");
    filled = Array(answer.length).fill("");
    history = [];

    document.getElementById("hintSynonym").textContent = card.synonym;
    document.getElementById("hintDefinition").textContent = card.definition;
    document.getElementById("hintSentence").textContent = card.sentence;

    const target = document.getElementById("targetSlots");
    target.innerHTML = "";
    for (let i = 0; i < answer.length; i++) {
      const span = document.createElement("span");
      span.className = "bl-letter";
      span.id = `slot${i}`;
      span.textContent = "_";
      target.appendChild(span);
    }

    document.getElementById("blFeedback").textContent = "";
    createBubbles();
  }

  function createBubbles() {
    const area = document.getElementById("bubblesArea");
    area.innerHTML = "";
    letters = answer.split("");
    const extras = "abcçdefgğhıijklmnoöprsştuüvyz".split("");
    while (letters.length < answer.length * 2) {
      letters.push(extras[Math.floor(Math.random() * extras.length)]);
    }
    shuffle(letters);
    letters.forEach(ch => {
      const btn = document.createElement("button");
      btn.className = "bubble-btn";
      btn.textContent = ch;
      btn.onclick = () => selectLetter(ch, btn);
      area.appendChild(btn);
    });
  }

  function selectLetter(ch, btn) {
    const idx = filled.findIndex(x => x === "");
    if (idx === -1) return;
    filled[idx] = ch;
    document.getElementById(`slot${idx}`).textContent = ch;
    btn.disabled = true;
    history.push(btn);
  }

  function removeLast() {
    const last = filled.map((v,i)=> v?i:null).filter(i=>i!==null).pop();
    if (last == null) return;
    filled[last] = "";
    document.getElementById(`slot${last}`).textContent = "_";
    const btn = history.pop();
    if (btn) btn.disabled = false;
  }

  document.getElementById("blClear").onclick = loadCard;
  document.getElementById("blSubmit").onclick = () => {
    const guess = filled.join("");
    const fb = document.getElementById("blFeedback");
    if (guess === answer) {
      fb.textContent = `🎉 Doğru! Kelime: ${wordCards[cardIdx].word}`;
      fb.className = "bl-feedback correct";
    } else {
      fb.textContent = `❌ Yanlış: ${guess || "(boş)"}`;
      fb.className = "bl-feedback incorrect";
    }
  };
  document.getElementById("blReveal").onclick = () => {
    const fb = document.getElementById("blFeedback");
    fb.textContent = `🔍 Cevap: ${wordCards[cardIdx].word}`;
    fb.className = "bl-feedback revealed";
  };
  document.getElementById("blNext").onclick = () => {
    cardIdx = (cardIdx + 1) % wordCards.length;
    loadCard();
  };

  document.addEventListener("keydown", e => {
    if (e.key.length === 1 && /^[a-zçğıİöÖşŞüÜ]$/i.test(e.key)) {
      const ch = e.key.toLowerCase();
      // find a bubble btn matching
      const btn = Array.from(document.querySelectorAll(".bubble-btn"))
        .find(b => !b.disabled && b.textContent.toLowerCase() === ch);
      if (btn) selectLetter(ch, btn);
    } else if (e.key === "Backspace") {
      removeLast();
    }
  });

  document.addEventListener("DOMContentLoaded", loadCard);
</script>
}