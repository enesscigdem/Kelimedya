@model Paragraph.WebApp.Areas.Student.Models.MyWordsViewModel

@{
    Layout = "~/Areas/Student/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Kelime Kartlarım - Profesyonel Kelime Yönetimi";
}

<link href="~/css/myWords.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<div class="words-container">
    <!-- Başlık & Kontroller -->
    <header class="header-area">
        <div class="header-content">
            <h1 class="words-hero">Kelime Kartlarım</h1>
            <p class="words-sub">Öğrendiğin kelimeleri etkili şekilde yönet</p>
        </div>
        <div class="tools">
            <div class="search-box">
                <input type="text" placeholder="Kelime ara..." id="searchInput">
                <i class="fas fa-search"></i>
            </div>
            <button class="ultra-btn" id="sortBtn">
                <i class="fas fa-sort-alpha-down"></i>
                Sırala
            </button>
        </div>
    </header>

    <!-- İstatistik Kartları -->
    <section class="stats-row">
        <div class="stat-card">
            <div class="stat-label">Toplam Kart</div>
            <div class="stat-value">@Model.LearnedWords.Count</div>
        </div>
        <div class="stat-card">
            <div class="stat-label">Öğrenilenler</div>
            <div class="stat-value green">@Model.LearnedWords.Count(x => x.Progress.IsLearned)</div>
        </div>
        <div class="stat-card">
            <div class="stat-label">Bugün Çalışılan</div>
            <div class="stat-value orange">
                @Model.LearnedWords.Count(x => x.Progress.LastSeenDate?.Date == DateTime.Today)
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-label">Gösterim</div>
            <div class="stat-value">@Model.LearnedWords.Sum(x => x.Progress.ViewCount)</div>
        </div>
    </section>

    <!-- Kelime Kartları Grid -->
    <section class="cards-grid" id="cardsGrid">
        @if(Model.LearnedWords?.Any() == true)
        {
            @foreach (var item in Model.LearnedWords)
            {
                <div class="word-card">
                 <div class="progress-indicator">
                        <span class="progress-text">Gösterim</span>
                        <span class="progress-number">@item.Progress.ViewCount</span>
                    </div>
                    <div class="card-header">
                        <img src="@(item.WordCard.ImageUrl ?? "/images/placeholder-word.png")" 
                             alt="@item.WordCard.Word"
                             class="card-image">
                    </div>
                    
                    <div class="card-body">
                        <h3 class="word-title">@item.WordCard.Word</h3>
                        <p class="word-definition">@item.WordCard.Definition</p>
                        
                        <div class="card-meta">
                            <span class="meta-item">
                                <i class="fas fa-history"></i>
                                @item.Progress.LastSeenDate?.ToString("dd MMM")
                            </span>
                            @if(item.Progress.IsLearned)
                            {
                                <span class="learned-badge">
                                    <i class="fas fa-check"></i>
                                    Öğrenildi
                                </span>
                            }
                        </div>
                        
                        <!-- Örnek Cümle Bölümü -->
                        <div class="example-section mt-2">
                            <p class="example-text">@item.WordCard.ExampleSentence</p>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="no-words">
                <img src="/images/empty-state.png" alt="Boş liste">
                <h3>Henüz kelime kartınız bulunmamaktadır</h3>
            </div>
        }
    </section>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const searchInput = document.getElementById('searchInput');
            const sortBtn = document.getElementById('sortBtn');
            let sortAsc = true;

            // Arama Fonksiyonu
            searchInput.addEventListener('input', (e) => {
                const searchTerm = e.target.value.toLowerCase();
                document.querySelectorAll('.word-card').forEach(card => {
                    const word = card.querySelector('.word-title').textContent.toLowerCase();
                    card.style.display = word.includes(searchTerm) ? 'flex' : 'none';
                });
            });

            // Sıralama Fonksiyonu
            sortBtn.addEventListener('click', () => {
                const container = document.getElementById('cardsGrid');
                const cards = Array.from(container.children);
                
                cards.sort((a, b) => {
                    const wordA = a.querySelector('.word-title').textContent.trim();
                    const wordB = b.querySelector('.word-title').textContent.trim();
                    return sortAsc ? 
                        wordA.localeCompare(wordB) : 
                        wordB.localeCompare(wordA);
                });

                cards.forEach(card => container.appendChild(card));
                sortAsc = !sortAsc;
                sortBtn.querySelector('i').className = sortAsc ? 
                    'fas fa-sort-alpha-down' : 
                    'fas fa-sort-alpha-up';
            });
        });
    </script>
}