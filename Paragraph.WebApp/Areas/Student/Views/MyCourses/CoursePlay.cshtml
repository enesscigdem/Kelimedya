@model Paragraph.WebApp.Areas.Student.Models.CoursePlayViewModel
@{
    Layout = "~/Areas/Student/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = Model.Course.Title;
}

<style>
    body {
        background: linear-gradient(120deg, #fffdfd 0%, #ffe5e0 100%);
        animation: bodyBg 10s infinite alternate ease-in-out;
        font-family: 'Josefin Sans', sans-serif;
        color: #333;
    }

    .course-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
        position: relative;
    }

    .pulse-decor {
        position: absolute;
        border-radius: 50%;
        filter: blur(20px);
        opacity: 0.6;
        animation: pulseAni 6s infinite alternate ease-in-out;
        z-index: -1;
    }

    @@keyframes pulseAni {
        0% { transform: scale(0.9); }
        100% { transform: scale(1.2); }
    }

    .pulse-decor:nth-child(1) {
        top: -30px;
        right: 15%;
        width: 160px;
        height: 160px;
        background: rgba(240, 82, 50, 0.3);
    }

    .pulse-decor:nth-child(2) {
        bottom: -30px;
        left: 10%;
        width: 180px;
        height: 180px;
        background: rgba(240, 82, 50, 0.2);
        animation-delay: 3s;
    }

    .course-header {
        text-align: center;
        margin-bottom: 3rem;
    }

    .course-title {
        font-size: 2.8rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        color: #f05232;
        text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.15);
    }

    .course-description {
        font-size: 1.1rem;
        color: #777;
        margin-bottom: 1rem;
    }

    .lessons-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
    }

    .lesson-card {
        background: linear-gradient(130deg, #ffe5e0 0%, #ffd9bf 100%);
        border-radius: 16px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.06);
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        transition: transform 0.3s, box-shadow 0.3s;
        position: relative;
        overflow: hidden;
    }

    .lesson-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 12px 24px rgba(0, 0, 0, 0.09);
    }

    .lesson-image {
        width: 100%;
        height: 180px;
        object-fit: cover;
        border-radius: 12px;
        margin-bottom: 1rem;
    }

    .lesson-number {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: rgba(240, 82, 50, 0.9);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-weight: 600;
    }

    .lesson-title {
        font-size: 1.3rem;
        color: #c94a2c;
        margin-bottom: 0.5rem;
        font-weight: 600;
    }

    .lesson-description {
        color: #555;
        font-size: 0.95rem;
        margin-bottom: 1rem;
        flex: 1;
    }

    .lesson-stats {
        display: flex;
        gap: 1rem;
        margin-bottom: 1rem;
        font-size: 0.9rem;
        color: #666;
    }

    .lesson-btn {
        background-color: #f05232;
        color: #fff;
        padding: 0.7rem 1.5rem;
        border-radius: 10px;
        border: none;
        cursor: pointer;
        font-weight: 600;
        text-decoration: none;
        text-align: center;
        transition: background 0.3s, transform 0.3s;
    }

    .lesson-btn:hover {
        background-color: #d74322;
        transform: translateY(-2px);
        color: #fff;
    }

    .no-lessons {
        text-align: center;
        padding: 2rem;
        background: rgba(255, 255, 255, 0.8);
        border-radius: 16px;
        color: #666;
    }
</style>

<div class="course-container">
    <div class="pulse-decor"></div>
    <div class="pulse-decor"></div>

    <div class="course-header">
        <h1 class="course-title">@Model.Course.Title</h1>
        <p class="course-description">@Model.Course.Description</p>
    </div>

    <div class="lessons-grid">
        @if (Model.Lessons != null && Model.Lessons.Any())
        {
            foreach (var lesson in Model.Lessons.OrderBy(l => l.Lesson.SequenceNo))
            {
                <div class="lesson-card">
                    <span class="lesson-number">Ders @lesson.Lesson.SequenceNo</span>
                    @if (!string.IsNullOrEmpty(lesson.Lesson.ImageUrl))
                    {
                        <img src="@lesson.Lesson.ImageUrl" alt="@lesson.Lesson.Title" class="lesson-image">
                    }
                    <h3 class="lesson-title">@lesson.Lesson.Title</h3>
                    <p class="lesson-description">@(lesson.Lesson.Description ?? "Açıklama bulunmuyor.")</p>
                    <div class="lesson-stats">
                        <span>@(lesson.Lesson.WordCount > 0 ? $"{lesson.Lesson.WordCount} Kelime" : "0 Kelime")</span>
                        <span>•</span>
                        <span>@(lesson.Lesson.GameCount > 0 ? $"{lesson.Lesson.GameCount} Oyun" : "0 Oyun")</span>
                    </div>
                    <a class="lesson-btn" asp-action="LessonDetail" asp-route-id="@lesson.Lesson.Id">
                        @(lesson.Lesson.IsStarted ? "Derse Devam Et" : "Derse Başla")
                    </a>
                </div>
            }
        }
        else
        {
            <div class="no-lessons">
                <h3>Henüz bu kursta ders bulunmuyor.</h3>
                <p>Lütfen daha sonra tekrar kontrol edin.</p>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        // Gerekirse JavaScript kodları buraya eklenebilir
    </script>
}
