@using System.Security.Claims
@model Kelimedya.WebApp.Areas.Student.Models.LessonDetailViewModel
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@{
    Layout = "~/Areas/Student/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Kelime Kartları";
    var studentId = User.FindFirstValue(ClaimTypes.NameIdentifier);
    var totalCards = Model.WordCards?.Count ?? 0;
    var lessonId = Model.Lesson != null ? Model.Lesson.Id : 0;
}

<div class="relative min-h-screen bg-gradient-to-br from-orange-50 via-white to-yellow-50">
<div class="absolute top-0 left-0 w-72 h-72 bg-gradient-to-br from-orange-200 to-orange-300 rounded-full -translate-x-36 -translate-y-36 blur-3xl"></div>
<div class="absolute top-20 right-0 w-56 h-56 bg-gradient-to-bl from-yellow-200 to-orange-200 rounded-full translate-x-28 blur-3xl"></div>

@if (Model.Lesson == null)
{
    <div class="relative z-10 p-6">
        <div class="bg-red-100 border border-red-400 text-red-700 px-6 py-4 rounded-xl shadow-lg">
            <div class="flex items-center gap-3">
                <i class="fas fa-exclamation-triangle text-lg"></i>
                <span class="font-medium text-lg">Ders bilgisi bulunamadı.</span>
            </div>
        </div>
    </div>
}
else
{
    <div class="relative z-10 p-6">
        <div class="mb-8 bg-white/90 backdrop-blur-sm rounded-3xl p-6 shadow-lg border border-orange-100 max-w-6xl mx-auto">
            <div class="flex items-center justify-between mb-4">
                <div class="flex items-center gap-4">
                    <a href="@Url.Action("MyLessons", "MyCourses", new { id = Model.Lesson.CourseId })"
                       class="w-12 h-12 bg-white rounded-3xl flex items-center justify-center shadow-md border border-orange-100 hover:shadow-lg transition-all duration-300 hover:scale-110">
                        <i class="fas fa-arrow-left text-gray-700 hover:text-orange-600 transition-colors duration-300 text-lg"></i>
                    </a>
                    <div>
                        <h1 class="text-3xl font-bold bg-gradient-to-r from-orange-600 to-orange-500 bg-clip-text text-transparent">
                            @Model.Lesson.Title
                        </h1>
                        <p class="text-base text-gray-600">Kelime Kartları</p>
                    </div>
                </div>

                <div class="text-right">
                    <span class="text-3xl font-bold bg-gradient-to-r from-orange-600 to-orange-500 bg-clip-text text-transparent" id="progressText">1 / @totalCards</span>
                    <div class="text-sm text-gray-500">Kart</div>
                </div>
            </div>

            <div class="w-full bg-gray-200 rounded-full h-3 shadow-inner">
                <div class="bg-gradient-to-r from-orange-500 to-orange-400 h-3 rounded-full transition-all duration-1000 ease-out shadow-sm relative overflow-hidden"
                     id="progressFill" style="width: 0%">
                    <div class="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent animate-pulse"></div>
                </div>
            </div>
        </div>

        <div  class="relative max-w-6xl mx-auto overflow-x-clip" id="kartSahne">
            @if (Model.WordCards != null && Model.WordCards.Any())
            {
                @for (int i = 0; i < Model.WordCards.Count; i++)
                {
                    var card = Model.WordCards[i].WordCard;
                    var indexDisplay = $"{i + 1} / {totalCards}";

                    <div class="kelime-card absolute inset-0 opacity-0 transform translate-x-full transition-all duration-200"
                         id="card@(i)"
                         data-wordcard-id="@card.Id">
                        <div class="bg-white/95 backdrop-blur-sm rounded-3xl shadow-xl border border-orange-100 p-8 relative overflow-hidden">
                            <div class="absolute top-0 right-0 w-28 h-28 bg-gradient-to-bl from-orange-100/50 to-transparent rounded-full -translate-y-14 translate-x-14"></div>
                            <div class="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-tr from-yellow-100/50 to-transparent rounded-full translate-y-12 -translate-x-12"></div>

                            <div class="relative z-10">
                                <div class="text-center mb-6">
                                    <div class="inline-flex items-center gap-3 bg-gradient-to-r from-orange-500 to-orange-600 text-white px-6 py-3 rounded-2xl shadow-md">
                                        <i class="fas fa-bookmark text-lg"></i>
                                        <span class="font-bold text-lg">Kart @indexDisplay</span>
                                    </div>
                                </div>

                                <div class="grid grid-cols-1 lg:grid-cols-2 gap-10">
                                    <div class="text-center">
                                        <div class="mb-6 relative">
                                            @if (!string.IsNullOrEmpty(card.ImageUrl))
                                            {
                                                <div class="relative inline-block">
                                                    <img src="@card.ImageUrl.ToDriveThumbnail()"
                                                         alt="@card.Word"
                                                         class="w-56 h-56 rounded-3xl mx-auto object-cover shadow-lg border-2 border-orange-200">
                                                    <div class="absolute inset-0 bg-gradient-to-t from-black/10 to-transparent rounded-3xl"></div>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="w-56 h-56 bg-gradient-to-br from-orange-500 via-orange-400 to-yellow-400 rounded-3xl mx-auto flex items-center justify-center shadow-lg border-2 border-orange-200 relative overflow-hidden">
                                                    <span class="text-white text-6xl font-bold z-10">@card.Word.Substring(0, 1).ToUpper()</span>
                                                    <div class="absolute top-4 left-4 w-5 h-5 bg-white/20 rounded-full"></div>
                                                    <div class="absolute bottom-4 right-4 w-4 h-4 bg-white/30 rounded-full"></div>
                                                </div>
                                            }
                                        </div>

                                        <!-- Kelime örneği -->
                                        <h2 class="text-4xl font-bold …">
                                            <span class="inline-flex items-center gap-1 group cursor-pointer">
                                                <span class="text-gray-900 group-hover:text-orange-600 transition-colors">
                                                    @card.Word
                                                </span>
                                                <svg xmlns="http://www.w3.org/2000/svg"
                                                     class="w-5 h-5 text-orange-500 opacity-0 group-hover:opacity-100 transition-opacity"
                                                     fill="currentColor" viewBox="0 0 20 20">
                                                    <path d="M9 4.5A4.5 4.5 0 0 1 13.5 9h-1.026a3.5 3.5 0 1 0 0 2H13.5A4.5 4.5 0 1 1 9 4.5zm2.5 4.5a2.5 2.5 0 1 0-5 0 2.5 2.5 0 0 0 5 0z"/>
                                                    <path d="M2 9a7 7 0 0 1 14 0 7 7 0 0 1-14 0zm1 0a6 6 0 0 0 12 0 6 6 0 0 0-12 0z"/>
                                                </svg>
                                            </span>
                                        </h2>

                                    </div>

                                    <div class="space-y-6">
                                        <div class="bg-gradient-to-br from-gray-50 to-gray-100 rounded-3xl p-6 shadow-inner border border-gray-200">
                                            <div class="space-y-4">
                                                <div>
                                                    <div class="flex items-center gap-3 mb-3">
                                                        <div class="w-8 h-8 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center">
                                                            <i class="fas fa-equals text-white"></i>
                                                        </div>
                                                        <h4 class="text-base font-bold text-gray-700">Eş Anlamı</h4>
                                                    </div>
                                                    <p class="text-xl font-semibold ml-11">
                                                        <span class="inline-flex items-center gap-1 group cursor-pointer">
                                                            <span class="group-hover:text-blue-600 transition-colors">
                                                                @card.Synonym
                                                            </span>
                                                            <svg xmlns="http://www.w3.org/2000/svg"
                                                                 class="w-4 h-4 text-blue-500 opacity-0 group-hover:opacity-100 transition-opacity"
                                                                 fill="currentColor" viewBox="0 0 20 20">
                                                                <path d="M9 4.5A4.5 4.5 0 0 1 13.5 9h-1.026a3.5 3.5 0 1 0 0 2H13.5A4.5 4.5 0 1 1 9 4.5zm2.5 4.5a2.5 2.5 0 1 0-5 0 2.5 2.5 0 0 0 5 0z"/>
                                                                <path d="M2 9a7 7 0 0 1 14 0 7 7 0 0 1-14 0zm1 0a6 6 0 0 0 12 0 6 6 0 0 0-12 0z"/>
                                                            </svg>
                                                        </span>
                                                    </p>
                                                </div>
                                                <div class="border-t border-gray-300 pt-4">
                                                    <div class="flex items-center gap-3 mb-3">
                                                        <div class="w-8 h-8 bg-gradient-to-br from-green-500 to-green-600 rounded-xl flex items-center justify-center">
                                                            <i class="fas fa-lightbulb text-white"></i>
                                                        </div>
                                                        <h4 class="text-base font-bold text-gray-700">Anlamı</h4>
                                                    </div>
                                                        <span class="inline-flex items-center gap-1 group cursor-pointer">
                                                                <span class="text-xl font-semibold ml-11">
                                                                    @Html.Raw(card.Definition)
                                                                </span>
                                                            <svg xmlns="http://www.w3.org/2000/svg"
                                                                 class="w-4 h-4 text-green-500 opacity-0 group-hover:opacity-100 transition-opacity"
                                                                 fill="currentColor" viewBox="0 0 20 20">
                                                                <path d="M9 4.5A4.5 4.5 0 0 1 13.5 9h-1.026a3.5 3.5 0 1 0 0 2H13.5A4.5 4.5 0 1 1 9 4.5zm2.5 4.5a2.5 2.5 0 1 0-5 0 2.5 2.5 0 0 0 5 0z"/>
                                                                <path d="M2 9a7 7 0 0 1 14 0 7 7 0 0 1-14 0zm1 0a6 6 0 0 0 12 0 6 6 0 0 0-12 0z"/>
                                                            </svg>
                                                        </span>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="bg-gradient-to-br from-orange-50 to-yellow-50 rounded-3xl p-6 border border-orange-200 shadow-sm">
                                            <div class="flex items-start gap-4">
                                                <div class="w-10 h-10 bg-gradient-to-br from-orange-500 to-orange-600 rounded-2xl flex items-center justify-center flex-shrink-0 shadow-md">
                                                    <i class="fas fa-quote-left text-white"></i>
                                                </div>
                                                <div>
                                                    <h4 class="text-base font-bold text-orange-700 mb-3">Örnek Cümle</h4>
                                                    <p class="text-lg text-gray-800 italic leading-relaxed">
                                                        <span class="inline-flex items-center gap-1 group cursor-pointer">
                                                            <span class="group-hover:text-orange-700 transition-colors">
                                                                @(string.IsNullOrEmpty(card.ExampleSentence)
                                                                    ? card.Definition
                                                                    : card.ExampleSentence)
                                                            </span>
                                                            <svg xmlns="http://www.w3.org/2000/svg"
                                                                 class="w-4 h-4 text-orange-500 opacity-0 group-hover:opacity-100 transition-opacity"
                                                                 fill="currentColor" viewBox="0 0 20 20">
                                                                <path d="M9 4.5A4.5 4.5 0 0 1 13.5 9h-1.026a3.5 3.5 0 1 0 0 2H13.5A4.5 4.5 0 1 1 9 4.5zm2.5 4.5a2.5 2.5 0 1 0-5 0 2.5 2.5 0 0 0 5 0z"/>
                                                                <path d="M2 9a7 7 0 0 1 14 0 7 7 0 0 1-14 0zm1 0a6 6 0 0 0 12 0 6 6 0 0 0-12 0z"/>
                                                            </svg>
                                                        </span>
                                                    </p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="flex justify-between gap-6 mt-8">
                                    <button onclick="prevCard()"
                                            class="flex-1 bg-gradient-to-r from-gray-100 to-gray-200 text-gray-700 py-4 px-8 rounded-2xl font-bold hover:from-gray-200 hover:to-gray-300 transition-all duration-300 flex items-center justify-center gap-3 shadow-md hover:shadow-lg transform hover:scale-105 text-lg">
                                        <i class="fas fa-chevron-left"></i>
                                        Önceki
                                    </button>
                                    <button onclick="nextCard()"
                                            class="flex-1 bg-gradient-to-r from-orange-500 to-orange-600 text-white py-4 px-8 rounded-2xl font-bold hover:from-orange-600 hover:to-orange-700 transition-all duration-300 flex items-center justify-center gap-3 shadow-md hover:shadow-lg transform hover:scale-105 text-lg">
                                        Sonraki
                                        <i class="fas fa-chevron-right"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="text-center py-16">
                    <div class="w-28 h-28 mx-auto mb-6 bg-gradient-to-br from-orange-100 to-orange-200 rounded-full flex items-center justify-center shadow-lg">
                        <i class="fas fa-exclamation-triangle text-5xl text-orange-400"></i>
                    </div>
                    <h3 class="text-2xl font-bold text-gray-700 mb-3">Bu derse ait kelime kartı bulunamadı.</h3>
                    <p class="text-lg text-gray-500">Lütfen daha sonra tekrar kontrol edin.</p>
                </div>
            }
        </div>

        @if (Model.LearnedWords != null && Model.LearnedWords.Any())
        {
            <div class="mt-10 bg-white/90 backdrop-blur-sm rounded-3xl p-6 shadow-lg border border-orange-100 max-w-6xl mx-auto">
                <div class="flex items-center gap-4 mb-6">
                    <div class="w-10 h-10 bg-gradient-to-br from-green-500 to-green-600 rounded-2xl flex items-center justify-center shadow-md">
                        <i class="fas fa-trophy text-white"></i>
                    </div>
                    <h2 class="text-xl font-bold text-gray-900">Öğrenilen Kelimeler</h2>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    @foreach (var item in Model.LearnedWords)
                    {
                        <div class="bg-gradient-to-br from-green-50 to-green-100 rounded-2xl p-4 border border-green-200 shadow-sm hover:shadow-md transition-all duration-300 hover:-translate-y-1">
                            <h4 class="font-bold text-green-800 mb-2 text-lg">@item.WordCard.Word</h4>
                            <p class="text-sm text-green-600 leading-relaxed">@item.WordCard.Definition</p>
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    <div id="modalOverlay" class="fixed inset-0 bg-black/70 backdrop-blur-md z-50 opacity-0 pointer-events-none transition-all duration-200"></div>

    <div id="gameModal" class="fixed inset-0 z-50 flex items-center justify-center p-4 opacity-0 pointer-events-none transition-all duration-200 transform scale-90">
        <div class="bg-gradient-to-br from-white via-orange-50/30 to-yellow-50/20 backdrop-blur-xl rounded-4xl shadow-2xl border border-orange-200/50 w-full max-w-7xl h-[100vh] flex flex-col overflow-hidden relative">

            <div class="absolute top-0 right-0 w-64 h-64 bg-gradient-to-bl from-orange-300/20 to-transparent rounded-full -translate-y-32 translate-x-32 blur-3xl"></div>
            <div class="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-tr from-yellow-300/20 to-transparent rounded-full translate-y-24 -translate-x-24 blur-3xl"></div>

            <div class="relative bg-gradient-to-r from-orange-500 via-orange-600 to-orange-700 p-6 text-white overflow-hidden flex-shrink-0">
                <div class="absolute inset-0 bg-gradient-to-r from-orange-600/50 via-transparent to-yellow-500/30"></div>
                <div class="absolute top-0 right-0 w-40 h-40 bg-white/10 rounded-full -translate-y-20 translate-x-20 blur-2xl"></div>
                <div class="absolute bottom-0 left-0 w-32 h-32 bg-white/5 rounded-full translate-y-16 -translate-x-16 blur-2xl"></div>

                <div class="relative z-10">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center gap-4">
                            <div class="w-14 h-14 bg-white/20 backdrop-blur-sm rounded-3xl flex items-center justify-center shadow-lg border border-white/30">
                                <i class="fas fa-gamepad text-2xl"></i>
                            </div>
                            <div>
                                <h3 id="modalTitle" class="text-2xl font-bold mb-1 drop-shadow-sm"></h3>
                                <p class="text-orange-100 text-sm font-medium">🎮 Kelime ile oyna ve öğren!</p>
                            </div>
                        </div>
                        @*<div class="flex items-center gap-4">
                            <div class="bg-white/20 backdrop-blur-sm rounded-2xl p-3 border border-white/30 shadow-lg">
                                <div class="flex items-center gap-3 text-sm font-medium">
                                    <i class="fas fa-target text-lg"></i>
                                    <span>Hedef Kelime:</span>
                                    <span id="gameWord" class="font-bold bg-white/30 px-3 py-1 rounded-xl text-base"></span>
                                </div>
                            </div>
                            <button onclick="closeGameModal()" class="w-10 h-10 bg-white/20 backdrop-blur-sm rounded-2xl flex items-center justify-center hover:bg-white/30 transition-all duration-300 border border-white/30 shadow-lg hover:scale-110">
                                <i class="fas fa-times text-lg"></i>
                            </button>
                        </div>*@
                    </div>
                </div>
            </div>

            <div class="flex-1 p-3 bg-gradient-to-br from-gray-50/80 to-orange-50/40 backdrop-blur-sm overflow-hidden relative">
                <div class="bg-white/90 backdrop-blur-sm rounded-3xl shadow-2xl overflow-hidden h-full border-2 border-orange-200/50 relative">

                    <div id="gameLoadingOverlay" style="display: none;" class="absolute inset-0 bg-gradient-to-br from-white/95 to-orange-50/90 backdrop-blur-md flex items-center justify-center z-20 transition-all duration-200">
                        <div class="text-center">
                            <div class="relative mb-6">
                                <div class="w-20 h-20 bg-gradient-to-r from-orange-500 to-orange-600 rounded-3xl flex items-center justify-center mx-auto shadow-2xl animate-pulse">
                                    <i class="fas fa-gamepad text-white text-3xl"></i>
                                </div>
                                <div class="absolute -top-2 -right-2 w-6 h-6 bg-yellow-400 rounded-full animate-ping"></div>
                            </div>
                            <div class="text-2xl font-bold text-gray-800 mb-3">🎮 Oyun Yükleniyor...</div>
                            <div class="text-lg text-gray-600 mb-4">Harika bir deneyim için hazırlanıyor</div>
                            <div class="flex justify-center">
                                <div class="flex space-x-2">
                                    <div class="w-3 h-3 bg-orange-500 rounded-full animate-bounce" style="animation-delay: 0s;"></div>
                                    <div class="w-3 h-3 bg-orange-500 rounded-full animate-bounce" style="animation-delay: 0.1s;"></div>
                                    <div class="w-3 h-3 bg-orange-500 rounded-full animate-bounce" style="animation-delay: 0.2s;"></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="relative w-full h-full overflow-hidden rounded-3xl">
                        <iframe id="gameFrame"
                                class="w-full h-full border-0 rounded-3xl"
                                style="min-height: 700px; background: linear-gradient(135deg, #f8fafc 0%, #fff7ed 100%);"
                                allow="fullscreen; autoplay; microphone; camera"
                                referrerpolicy="no-referrer-when-downgrade">
                        </iframe>

                        <div class="absolute inset-0 pointer-events-none">
                            <div class="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-orange-500 to-yellow-500 opacity-50"></div>
                            <div class="absolute bottom-0 left-0 w-full h-1 bg-gradient-to-r from-yellow-500 to-orange-500 opacity-50"></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="p-4 bg-gradient-to-r from-white via-orange-50/50 to-yellow-50/30 backdrop-blur-sm border-t border-orange-200/50 flex-shrink-0 relative">
                <div class="absolute inset-0 bg-gradient-to-r from-orange-100/20 to-yellow-100/20"></div>
                <div class="relative z-10 flex items-center justify-between">
                    <div class="flex items-center gap-3 text-gray-700">
                        <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center shadow-lg">
                            <i class="fas fa-info-circle text-white"></i>
                        </div>
                        <div>
                            <div class="font-bold text-lg">💡 İpucu</div>
                            <div class="text-sm">Oyunu tamamladıktan sonra sonraki oyuna geçebilirsiniz</div>
                        </div>
                    </div>
                    <button id="btnNextGame" class="bg-gradient-to-r from-orange-500 via-orange-600 to-orange-700 text-white py-4 px-8 rounded-2xl font-bold hover:from-orange-600 hover:via-orange-700 hover:to-orange-800 transition-all duration-300 shadow-xl hover:shadow-2xl transform hover:scale-105 flex items-center gap-3 text-lg border border-orange-400/50">
                        <i class="fas fa-arrow-right text-xl"></i>
                        <span>Sonraki Oyun</span>
                        <div class="w-2 h-2 bg-yellow-400 rounded-full animate-pulse"></div>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div id="quizModal" class="fixed inset-0 z-50 flex items-center justify-center p-6 opacity-0 pointer-events-none transition-all duration-300 transform scale-95">
        <div class="bg-white/95 backdrop-blur-sm rounded-3xl shadow-2xl border border-orange-100 overflow-hidden w-full max-w-4xl max-h-[85vh] flex flex-col">
            <!-- Quiz Header -->
            <div class="bg-gradient-to-r from-blue-500 to-blue-600 p-4 text-white relative overflow-hidden flex-shrink-0">
                <div class="absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full -translate-y-16 translate-x-16"></div>
                <div class="relative z-10">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center gap-3">
                            <div class="w-10 h-10 bg-white/20 rounded-2xl flex items-center justify-center">
                                <i class="fas fa-question-circle text-lg"></i>
                            </div>
                            <div>
                                <h3 id="quizTitle" class="text-xl font-bold">Test Sorusu</h3>
                                <p class="text-blue-100 text-sm">Bilgini test et!</p>
                            </div>
                        </div>
                        <button onclick="closeQuizModal()" class="w-8 h-8 bg-white/20 rounded-xl flex items-center justify-center hover:bg-white/30 transition-colors duration-200">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            </div>

            <div class="flex-1 p-8 overflow-y-auto bg-gradient-to-br from-blue-50 to-blue-100">
                <div class="max-w-2xl mx-auto">
                    <div class="bg-white rounded-3xl p-8 mb-8 shadow-lg border border-blue-200">
                        <div class="text-center mb-6">
                            <div class="w-16 h-16 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center mx-auto mb-4 shadow-lg">
                                <i class="fas fa-lightbulb text-white text-2xl"></i>
                            </div>
                            <div id="quizQuestion" class="text-2xl font-bold text-blue-800"></div>
                        </div>
                    </div>

                    <div class="quiz-options space-y-4">
                        <button class="w-full text-left p-6 bg-white hover:bg-blue-50 rounded-2xl transition-all duration-300 border-2 border-gray-200 hover:border-blue-300 shadow-lg hover:shadow-xl transform hover:scale-[1.02] text-lg font-medium group" data-opt="1" id="quizOpt1">
                            <div class="flex items-center gap-4">
                                <div class="w-8 h-8 bg-blue-100 group-hover:bg-blue-200 rounded-full flex items-center justify-center font-bold text-blue-600 transition-colors duration-300">A</div>
                                <span class="flex-1"></span>
                            </div>
                        </button>
                        <button class="w-full text-left p-6 bg-white hover:bg-blue-50 rounded-2xl transition-all duration-300 border-2 border-gray-200 hover:border-blue-300 shadow-lg hover:shadow-xl transform hover:scale-[1.02] text-lg font-medium group" data-opt="2" id="quizOpt2">
                            <div class="flex items-center gap-4">
                                <div class="w-8 h-8 bg-blue-100 group-hover:bg-blue-200 rounded-full flex items-center justify-center font-bold text-blue-600 transition-colors duration-300">B</div>
                                <span class="flex-1"></span>
                            </div>
                        </button>
                        <button class="w-full text-left p-6 bg-white hover:bg-blue-50 rounded-2xl transition-all duration-300 border-2 border-gray-200 hover:border-blue-300 shadow-lg hover:shadow-xl transform hover:scale-[1.02] text-lg font-medium group" data-opt="3" id="quizOpt3">
                            <div class="flex items-center gap-4">
                                <div class="w-8 h-8 bg-blue-100 group-hover:bg-blue-200 rounded-full flex items-center justify-center font-bold text-blue-600 transition-colors duration-300">C</div>
                                <span class="flex-1"></span>
                            </div>
                        </button>
                        <button class="w-full text-left p-6 bg-white hover:bg-blue-50 rounded-2xl transition-all duration-300 border-2 border-gray-200 hover:border-blue-300 shadow-lg hover:shadow-xl transform hover:scale-[1.02] text-lg font-medium group" data-opt="4" id="quizOpt4">
                            <div class="flex items-center gap-4">
                                <div class="w-8 h-8 bg-blue-100 group-hover:bg-blue-200 rounded-full flex items-center justify-center font-bold text-blue-600 transition-colors duration-300">D</div>
                                <span class="flex-1"></span>
                            </div>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
</div>

@section Scripts {
    <link href="https://cdn.jsdelivr.net/npm/izitoast/dist/css/iziToast.min.css" rel="stylesheet"/>
    <script src="https://cdn.jsdelivr.net/npm/izitoast/dist/js/iziToast.min.js"></script>
    <script>
        const API_BASE_URL = '@Configuration["AppSettings:ApiUrl"]';
        const studentId = '@studentId';
        const totalCards = @totalCards;
        const lessonId = @Model.Lesson.Id;
        let cardEls = [];
        let currentIndex = 0;
        
        function hideGameLoading() {
            console.log('🎮 Game loaded successfully!');
            setTimeout(() => {
                const loadingOverlay = document.getElementById('gameLoadingOverlay');
                if (loadingOverlay) {
                    loadingOverlay.style.opacity = '0';
                    loadingOverlay.style.transform = 'scale(0.9)';
                    setTimeout(() => {
                        loadingOverlay.style.display = 'none';
                    }, 500);
                }
            }, 1500);
        }
        
        function closeGameModal(){
            const overlay = document.getElementById('modalOverlay');
            const modal   = document.getElementById('gameModal');
            
            overlay.classList.add('opacity-0','pointer-events-none');
            overlay.classList.remove('opacity-100');
            modal.classList.add('opacity-0','pointer-events-none','scale-90');
            modal.classList.remove('opacity-100','scale-100');
            
            setTimeout(()=>{
                overlay.style.display = 'none';
                modal.style.display   = 'none';
            }, 500);
            
            document.getElementById('gameFrame').src = 'about:blank';
        }
       
        function closeQuizModal(){
           const overlay = document.getElementById('modalOverlay');
           const modal   = document.getElementById('quizModal');
           
           overlay.classList.add('opacity-0','pointer-events-none');
           overlay.classList.remove('opacity-100');
           modal.classList.add('opacity-0','pointer-events-none','scale-95');
           modal.classList.remove('opacity-100','scale-100');
           
           setTimeout(()=>{
               overlay.style.display = 'none';
               modal.style.display   = 'none';
           }, 300);
       }

        document.addEventListener("DOMContentLoaded", function(){
            initCards();
            
            document.getElementById("btnNextGame").addEventListener("click", () => {
                completeGame();
            });
            
            window.addEventListener('message', e => { 
                console.log('📨 Message received:', e.data);
                if(e.data === 'next-game' || e.data === 'game-completed') {
                    completeGame(); 
                }
            });
            
            document.querySelectorAll('#quizModal button[data-opt]').forEach(btn => {
                btn.addEventListener('click', () => {
                    const opt = parseInt(btn.getAttribute('data-opt'));
                    answerQuiz(opt);
                });
            });
        });
        
        // Klavye ile kart gezme: → sonraki, ← önceki
        document.addEventListener('keydown', (e) => {
          // yazı yazarken tetiklenmesin
          const a = document.activeElement;
          const isTyping = a && (a.tagName === 'INPUT' || a.tagName === 'TEXTAREA' || a.isContentEditable);
          if (isTyping) return;
        
          // modal/oyun/quiz açıksa tetiklenmesin
          const overlay = document.getElementById('modalOverlay');
          const overlayVisible = overlay && overlay.classList.contains('opacity-100') && !overlay.classList.contains('pointer-events-none');
          if (overlayVisible) return;
        
          if (e.key === 'ArrowRight') {
            e.preventDefault();
            nextCard();   // butonla aynı davranış: son kartta oyunları başlatır
          } else if (e.key === 'ArrowLeft') {
            e.preventDefault();
            prevCard();
          }
        });

        
        function initCards(){
            for (let i = 0; i < totalCards; i++){
                let cardEl = document.getElementById("card" + i);
                if (cardEl) {
                    cardEls.push(cardEl);
                }
            }
            if (cardEls.length > 0) {
                showCard(0);
                updateWordCardProgress(0);
                updateLessonProgress(0);
            } else {
                console.warn("Hiç kart bulunamadı!");
            }
        }
        
       function showCard(index) {
                   cardEls.forEach((card, i) => {
                       card.classList.remove('opacity-100', 'translate-x-0');
                       card.classList.add('opacity-0', 'translate-x-full');
                   });
                   
                   setTimeout(() => {
                       cardEls[index].classList.remove('opacity-0', 'translate-x-full');
                       cardEls[index].classList.add('opacity-100', 'translate-x-0');
                   }, 150);
                   
                   updateProgress(index);
                   currentIndex = index;
                   }
        function updateProgress(idx){
            let percent = ((idx + 1) / totalCards) * 100;
            document.getElementById("progressFill").style.width = percent + "%";
            document.getElementById("progressText").textContent = `${idx + 1} / ${totalCards}`;
        }
        
        function nextCard(){
          if (currentIndex < totalCards - 1){
            const newIndex = currentIndex + 1;
            showCard(newIndex);
            // sadece burda çağır:
            updateLessonProgress(newIndex);
            updateWordCardProgress(newIndex);
          } else {
            startGames();
          }
        }
        
        function prevCard(){
            if (currentIndex > 0){
                showCard(currentIndex - 1);
                updateLessonProgress(currentIndex - 1);
                updateWordCardProgress(currentIndex - 1);
            }
        }
        
        const lessonWords = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.WordCards.Select(w => new { id = w.WordCard.Id, word = w.WordCard.Word })));
        const games = [
            {title:"🎯 Adam Asmaca", url:"/Student/Games/AdamAsmaca", perWord:true},
            {title:"🧩 Kelime Bulmaca", url:"/Student/Games/KelimeBulmaca", perWord:true},
            {title:"🖼️ Görselden Soru", url:"/Student/Games/VisualPrompt", perWord:true},
            {title:"📷 Kelimeden Görsel", url:"/Student/Games/WordImage", perWord:true},
            {title:"🫧 Kabarcık Harfler", url:"/Student/Games/BubbleLetters", perWord:true},
            {title:"🔗 Çengel Bulmaca", url:"/Student/Games/CrossPuzzle", perWord:false, repeat:2},
            {title:"🔄 Eş Yakın Eşleştirme", url:"/Student/Games/SynonymMatch", perWord:false, repeat:1},
            {title:"📖 Cümle Kurma", url:"/Student/Games/SentenceBuilder", perWord:true}
        ];
        let playList = [];
        let wordOrder = [];
        let gameIndex = 0;

        function startGames(){
            wordOrder = shuffleArray(lessonWords);
            playList = [];
            games.forEach(g => {
                if(g.perWord !== false){
                    wordOrder.forEach(w => playList.push({game:g, word:w}));
                }else{
                    const rep = g.repeat || 1;
                    for(let i=0;i<rep;i++) playList.push({game:g, batch:i});
                }
            });
            gameIndex = 0;
            showCurrentGame();
        }
        
        function showCurrentGame(){
            if(gameIndex >= playList.length){
                openQuiz();
                return;
            }
            
            const overlay = document.getElementById('modalOverlay');
            const modal   = document.getElementById('gameModal');
            
            overlay.style.display = 'block';
            modal.style.display   = 'flex';
            
            setTimeout(() => {
                overlay.classList.remove('opacity-0','pointer-events-none');
                overlay.classList.add('opacity-100');
                modal.classList.remove('opacity-0','pointer-events-none','scale-90');
                modal.classList.add('opacity-100','scale-100');
            }, 50);
            
            const loading = document.getElementById('gameLoadingOverlay');
            loading.style.display = 'flex';
            loading.style.opacity = '1';
            loading.style.transform = 'scale(1)';
            
            const entry    = playList[gameIndex];
            const game     = entry.game;
            const wordCard = entry.word;
            document.getElementById('modalTitle').textContent = game.title;
            /*document.getElementById('gameWord').textContent   = wordCard ? wordCard.word : '';*/

            console.log('🎮 Loading game:', game.title, wordCard ? 'with word:' + wordCard.word : '');

            const gameFrame = document.getElementById('gameFrame');
            const batchParam = (entry.batch !== undefined) ? `&batch=${entry.batch}` : '';
            const gameUrl = wordCard
                ? `${game.url}?popUp=1&word=${encodeURIComponent(wordCard.word)}&id=${wordCard.id}&theme=premium`
                : `${game.url}?popUp=1&lessonId=${lessonId}${batchParam}&theme=premium`;
            
            gameFrame.onload = function() {
                console.log('✅ Game iframe loaded successfully');
                hideGameLoading();
            };
            
            gameFrame.onerror = function() {
                console.error('❌ Game iframe failed to load');
                hideGameLoading();
            };
            
            gameFrame.src = gameUrl;
            
            setTimeout(() => {
                hideGameLoading();
            }, 3000);
        }
        
        function completeGame(){
            console.log('🎉 Game completed, moving to next...');
            gameIndex++;
            setTimeout(() => {
                showCurrentGame();
            }, 800);
        }
        
        let quizQuestions = [];
        let quizIndex = 0;
        let quizCorrect = 0;
        
        async function openQuiz(){
            try {
                const res = await fetch(`${API_BASE_URL}/api/wordcards/lessons/${lessonId}/testquestions`);
                if(!res.ok){ finishCourse(); return; }
                const qs = await res.json();
                if(!qs || qs.length === 0){ finishCourse(); return; }
                const max = Math.max(1, Math.floor(totalCards / 2));
                quizQuestions = shuffleArray(qs).slice(0, max);
                quizIndex = 0;
                quizCorrect = 0;
                showQuizQuestion();
            } catch (error) {
                console.error('Quiz yüklenirken hata:', error);
                finishCourse();
            }
        }
        
        function showQuizQuestion(){
            if(quizIndex >= quizQuestions.length){
                closeQuiz();
                return;
            }
            const q = quizQuestions[quizIndex];
            document.getElementById('quizQuestion').textContent = q.questionText;
            document.getElementById('quizOpt1').querySelector('span').textContent = q.optionA;
            document.getElementById('quizOpt2').querySelector('span').textContent = q.optionB;
            document.getElementById('quizOpt3').querySelector('span').textContent = q.optionC;
            document.getElementById('quizOpt4').querySelector('span').textContent = q.optionD;
            
            const overlay = document.getElementById('modalOverlay');
            const modal = document.getElementById('quizModal');
            overlay.classList.remove('opacity-0', 'pointer-events-none');
            overlay.classList.add('opacity-100');
            modal.classList.remove('opacity-0', 'pointer-events-none', 'scale-95');
            modal.classList.add('opacity-100', 'scale-100');
        }
        
        function answerQuiz(opt){
            const q = quizQuestions[quizIndex];
            const isCorrect = opt === q.correctOption;
            if(isCorrect){
                quizCorrect++;
                showIziToastSuccess('Doğru cevap!');
            }else{
                showIziToastError('Yanlış cevap!');
            }
            quizIndex++;
            setTimeout(() => {
                showQuizQuestion();
            }, 500);
        }
        
        function closeQuiz(){
            closeQuizModal();
            
            const payload = {studentId, lessonId, totalQuestions: quizQuestions.length, correctAnswers: quizCorrect, score: quizCorrect * 10};
            Promise.all([
                fetch(`${API_BASE_URL}/api/gamestats/record`, {
                    method:'POST',
                    headers:{'Content-Type':'application/json'},
                    body: JSON.stringify({studentId, gameId:-1, score: quizCorrect*10, durationSeconds:0})
                }),
                fetch(`${API_BASE_URL}/api/quizresults/record`, {
                    method:'POST',
                    headers:{'Content-Type':'application/json'},
                    body: JSON.stringify(payload)
                })
            ]).finally(() => finishCourse());
        }
        
        function shuffleArray(arr){
            for(let i = arr.length -1; i>0; i--){
                const j = Math.floor(Math.random()* (i+1));
                [arr[i], arr[j]] = [arr[j], arr[i]];
            }
            return arr;
        }
        
        const MYCOURSES_URL = '@Url.Action("Index","MyCourses", new { area = "Student" })';

        function finishCourse(){
            showIziToastSuccess("🎉 Tebrikler, dersi başarıyla tamamladınız!");
            setTimeout(() => {
                window.location.assign(MYCOURSES_URL);
            }, 2000);
        }

        
        function updateWordCardProgress(cardIndex) {
            if(cardIndex < 0 || cardIndex >= totalCards) return;
            const cardEl = cardEls[cardIndex];
            const wordCardId = cardEl.getAttribute("data-wordcard-id");
            const payload = {
                StudentId: studentId,
                WordCardId: parseInt(wordCardId),
                LessonId: lessonId,
                IsLearned: true,
                ResponseTimeSeconds: 2.5
            };
            fetch(`${API_BASE_URL}/api/progress/wordcards/update`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            })
            .then(response => {
                if (response.status === 404) {
                    return fetch(`${API_BASE_URL}/api/progress/wordcards/create`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });
                }
                if (!response.ok) throw new Error("Kelime kartı ilerlemesi güncellenemedi.");
                return response.json();
            })
            .then(data => {
                console.log("Kelime kartı ilerlemesi:", data);
            })
            .catch(error => {
                console.error("Kelime kartı ilerlemesi hatası:", error);
                showIziToastError("Kelime kartı ilerlemesi güncellenemedi.");
            });
        }
        
        function updateLessonProgress(cardIndex) {
            let completion = ((cardIndex + 1) / totalCards) * 100;
            const payload = {
                StudentId: studentId,
                LessonId: lessonId,
                LearnedWordCardsCount: cardIndex + 1,
                CompletionPercentage: completion,
                TotalAttempts: cardIndex + 1,
                TotalTimeSpentSeconds: (cardIndex + 1) * 3
            };
            fetch(`${API_BASE_URL}/api/progress/lessons/update`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            })
            .then(response => {
                if (response.status === 404) {
                    return fetch(`${API_BASE_URL}/api/progress/lessons/create`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });
                }
                if (!response.ok) throw new Error("Ders ilerlemesi güncellenemedi.");
                return response.json();
            })
            .then(data => {
                console.log("Ders ilerlemesi:", data);
            })
            .catch(error => {
                console.error("Ders ilerlemesi hatası:", error);
                showIziToastError("Ders ilerlemesi güncellenemedi.");
            });
        }
        
        function showIziToastSuccess(message) {
            iziToast.show({
                title: 'Başarılı!',
                message: message,
                position: 'topRight',
                theme: 'light',
                color: 'green',
                timeout: 4000,
                icon: 'fa-solid fa-circle-check',
                transitionIn: 'fadeInDown',
                transitionOut: 'fadeOutUp',
                closeOnClick: true,
                progressBar: false
            });
        }
        
        function showIziToastError(message) {
            iziToast.show({
                title: 'Hata!',
                message: message,
                position: 'topRight',
                theme: 'light',
                color: 'red',
                timeout: 5000,
                icon: 'fa-solid fa-triangle-exclamation',
                transitionIn: 'fadeInDown',
                transitionOut: 'fadeOutUp',
                closeOnClick: true,
                progressBar: false
            });
        }
    </script>
}

<style>
.kelime-card {
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
}

#modalOverlay {
    backdrop-filter: blur(12px);
    background: linear-gradient(135deg, rgba(0,0,0,0.4) 0%, rgba(0,0,0,0.7) 100%);
}

#gameModal {
    backdrop-filter: blur(20px);
    transition: all 0.5s cubic-bezier(0.34, 1.56, 0.64, 1);
}

#gameModal .rounded-4xl {
    border-radius: 2rem;
}

#gameLoadingOverlay {
    backdrop-filter: blur(8px);
    transition: all 0.5s ease-out;
}

#gameFrame {
    border-radius: 1.5rem;
    box-shadow: 
        0 25px 50px -12px rgba(0, 0, 0, 0.25),
        0 0 0 1px rgba(255, 255, 255, 0.1),
        inset 0 1px 0 rgba(255, 255, 255, 0.1);
    transition: all 0.3s ease;
}

#gameFrame:hover {
    box-shadow: 
        0 32px 64px -12px rgba(0, 0, 0, 0.35),
        0 0 0 1px rgba(255, 255, 255, 0.15),
        inset 0 1px 0 rgba(255, 255, 255, 0.15);
}

#quizModal {
    backdrop-filter: blur(8px);
}

.quiz-options button:hover {
    transform: translateY(-2px) scale(1.02);
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
}

.quiz-options button.correct {
    background: linear-gradient(135deg, #dcfce7 0%, #bbf7d0 100%);
    border-color: #4ade80;
    color: #16a34a;
    box-shadow: 0 8px 25px -8px rgba(74, 222, 128, 0.4);
}

.quiz-options button.correct .w-8 {
    background: #4ade80;
    color: white;
}

.quiz-options button.wrong {
    background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);
    border-color: #f87171;
    color: #dc2626;
    box-shadow: 0 8px 25px -8px rgba(248, 113, 113, 0.4);
}

.quiz-options button.wrong .w-8 {
    background: #f87171;
    color: white;
}

@@keyframes bounce {
    0%, 100% { 
        transform: translateY(0);
        animation-timing-function: cubic-bezier(0.8, 0, 1, 1);
    }
    50% { 
        transform: translateY(-25%);
        animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
    }
}

@@keyframes pulse {
    0%, 100% { 
        opacity: 1; 
        transform: scale(1);
    }
    50% { 
        opacity: 0.8; 
        transform: scale(1.05);
    }
}

@@keyframes ping {
    75%, 100% {
        transform: scale(2);
        opacity: 0;
    }
}

#btnNextGame {
    background: linear-gradient(135deg, #f97316 0%, #ea580c 50%, #dc2626 100%);
    box-shadow: 
        0 10px 25px -5px rgba(249, 115, 22, 0.4),
        0 4px 6px -2px rgba(0, 0, 0, 0.05),
        inset 0 1px 0 rgba(255, 255, 255, 0.1);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

#btnNextGame:hover {
    background: linear-gradient(135deg, #ea580c 0%, #dc2626 50%, #b91c1c 100%);
    box-shadow: 
        0 20px 40px -10px rgba(249, 115, 22, 0.6),
        0 8px 16px -4px rgba(0, 0, 0, 0.1),
        inset 0 1px 0 rgba(255, 255, 255, 0.15);
    transform: translateY(-2px) scale(1.05);
}

@@media (max-width: 768px) {
    #gameModal {
        margin: 1rem;
        max-width: calc(100vw - 2rem);
        max-height: calc(100vh - 2rem);
    }
    
    #gameFrame {
        min-height: 500px;
    }
}
</style>