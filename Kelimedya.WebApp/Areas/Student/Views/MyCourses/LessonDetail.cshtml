@using System.Security.Claims
@model Kelimedya.WebApp.Areas.Student.Models.LessonDetailViewModel
@{
    Layout = "~/Areas/Student/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Kelime Kartları";
    var studentId = User.FindFirstValue(ClaimTypes.NameIdentifier);
    var totalCards = Model.WordCards?.Count ?? 0;
    var lessonId = Model.Lesson != null ? Model.Lesson.Id : 0;
}

<div class="relative min-h-screen bg-gradient-to-br from-orange-50 via-white to-yellow-50">
    <!-- Decorative Elements -->
    <div class="absolute top-0 left-0 w-72 h-72 bg-gradient-to-br from-orange-200 to-orange-300 rounded-full opacity-15 -translate-x-36 -translate-y-36 blur-3xl"></div>
    <div class="absolute top-20 right-0 w-56 h-56 bg-gradient-to-bl from-yellow-200 to-orange-200 rounded-full opacity-10 translate-x-28 blur-3xl"></div>
    
    @if (Model.Lesson == null)
    {
        <div class="relative z-10 p-6">
            <div class="bg-red-100 border border-red-400 text-red-700 px-6 py-4 rounded-xl shadow-lg">
                <div class="flex items-center gap-3">
                    <i class="fas fa-exclamation-triangle text-lg"></i>
                    <span class="font-medium text-lg">Ders bilgisi bulunamadı.</span>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="relative z-10 p-6">
            <!-- Compact Progress Bar - Slightly Larger -->
            <div class="mb-8 bg-white/90 backdrop-blur-sm rounded-3xl p-6 shadow-lg border border-orange-100 max-w-6xl mx-auto">
                <div class="flex items-center justify-between mb-4">
                    <div class="flex items-center gap-4">
                        <a href="@Url.Action("MyLessons", "MyCourses", new { id = Model.Lesson.CourseId })" 
                           class="w-12 h-12 bg-white rounded-3xl flex items-center justify-center shadow-md border border-orange-100 hover:shadow-lg transition-all duration-300 hover:scale-110">
                            <i class="fas fa-arrow-left text-gray-700 hover:text-orange-600 transition-colors duration-300 text-lg"></i>
                        </a>
                        <div>
                            <h1 class="text-3xl font-bold bg-gradient-to-r from-orange-600 to-orange-500 bg-clip-text text-transparent">
                                @Model.Lesson.Title
                            </h1>
                            <p class="text-base text-gray-600">Kelime Kartları</p>
                        </div>
                    </div>
                    
                    <div class="text-right">
                        <span class="text-3xl font-bold bg-gradient-to-r from-orange-600 to-orange-500 bg-clip-text text-transparent" id="progressText">1 / @totalCards</span>
                        <div class="text-sm text-gray-500">Kart</div>
                    </div>
                </div>
                
                <div class="w-full bg-gray-200 rounded-full h-3 shadow-inner">
                    <div class="bg-gradient-to-r from-orange-500 to-orange-400 h-3 rounded-full transition-all duration-1000 ease-out shadow-sm relative overflow-hidden" 
                         id="progressFill" style="width: 0%">
                        <div class="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent animate-pulse"></div>
                    </div>
                </div>
            </div>
            
            <!-- Word Cards Container - Slightly Larger -->
            <div class="relative max-w-6xl mx-auto" id="kartSahne">
                @if (Model.WordCards != null && Model.WordCards.Any())
                {
                    @for (int i = 0; i < Model.WordCards.Count; i++)
                    {
                        var card = Model.WordCards[i].WordCard;
                        var indexDisplay = $"{i + 1} / {totalCards}";
                        
                        <div class="kelime-card absolute inset-0 opacity-0 transform translate-x-full transition-all duration-500" 
                             id="card@(i)" 
                             data-wordcard-id="@card.Id">
                            <div class="bg-white/95 backdrop-blur-sm rounded-3xl shadow-xl border border-orange-100 p-8 relative overflow-hidden">
                                <!-- Card Background Effects -->
                                <div class="absolute top-0 right-0 w-28 h-28 bg-gradient-to-bl from-orange-100/50 to-transparent rounded-full -translate-y-14 translate-x-14"></div>
                                <div class="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-tr from-yellow-100/50 to-transparent rounded-full translate-y-12 -translate-x-12"></div>
                                
                                <div class="relative z-10">
                                    <!-- Card Index - Slightly Larger -->
                                    <div class="text-center mb-6">
                                        <div class="inline-flex items-center gap-3 bg-gradient-to-r from-orange-500 to-orange-600 text-white px-6 py-3 rounded-2xl shadow-md">
                                            <i class="fas fa-bookmark text-lg"></i>
                                            <span class="font-bold text-lg">Kart @indexDisplay</span>
                                        </div>
                                    </div>
                                    
                                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-10">
                                        <!-- Left Side - Visual - Larger -->
                                        <div class="text-center">
                                            <!-- Card Image/Icon -->
                                            <div class="mb-6 relative">
                                                @if (!string.IsNullOrEmpty(card.ImageUrl))
                                                {
                                                    <div class="relative inline-block">
                                                        <img src="@card.ImageUrl" 
                                                             alt="@card.Word" 
                                                             class="w-56 h-56 rounded-3xl mx-auto object-cover shadow-lg border-2 border-orange-200">
                                                        <div class="absolute inset-0 bg-gradient-to-t from-black/10 to-transparent rounded-3xl"></div>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="w-56 h-56 bg-gradient-to-br from-orange-500 via-orange-400 to-yellow-400 rounded-3xl mx-auto flex items-center justify-center shadow-lg border-2 border-orange-200 relative overflow-hidden">
                                                        <span class="text-white text-6xl font-bold z-10">@card.Word.Substring(0, 1).ToUpper()</span>
                                                        <!-- Decorative Elements -->
                                                        <div class="absolute top-4 left-4 w-5 h-5 bg-white/20 rounded-full"></div>
                                                        <div class="absolute bottom-4 right-4 w-4 h-4 bg-white/30 rounded-full"></div>
                                                    </div>
                                                }
                                            </div>
                                            
                                            <!-- Word Title - Larger -->
                                            <h2 class="text-4xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent mb-4">
                                                @card.Word
                                            </h2>
                                        </div>
                                        
                                        <!-- Right Side - Information - Larger -->
                                        <div class="space-y-6">
                                            <!-- Word Info -->
                                            <div class="bg-gradient-to-br from-gray-50 to-gray-100 rounded-3xl p-6 shadow-inner border border-gray-200">
                                                <div class="space-y-4">
                                                    <div>
                                                        <div class="flex items-center gap-3 mb-3">
                                                            <div class="w-8 h-8 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center">
                                                                <i class="fas fa-equals text-white"></i>
                                                            </div>
                                                            <h4 class="text-base font-bold text-gray-700">Eş Anlamı</h4>
                                                        </div>
                                                        <p class="text-xl font-semibold text-gray-900 ml-11">@card.Synonym</p>
                                                    </div>
                                                    <div class="border-t border-gray-300 pt-4">
                                                        <div class="flex items-center gap-3 mb-3">
                                                            <div class="w-8 h-8 bg-gradient-to-br from-green-500 to-green-600 rounded-xl flex items-center justify-center">
                                                                <i class="fas fa-lightbulb text-white"></i>
                                                            </div>
                                                            <h4 class="text-base font-bold text-gray-700">Anlamı</h4>
                                                        </div>
                                                        <p class="text-xl font-semibold text-gray-900 ml-11">@card.Definition</p>
                                                    </div>
                                                </div>
                                            </div>
                                            
                                            <!-- Example Sentence -->
                                            <div class="bg-gradient-to-br from-orange-50 to-yellow-50 rounded-3xl p-6 border border-orange-200 shadow-sm">
                                                <div class="flex items-start gap-4">
                                                    <div class="w-10 h-10 bg-gradient-to-br from-orange-500 to-orange-600 rounded-2xl flex items-center justify-center flex-shrink-0 shadow-md">
                                                        <i class="fas fa-quote-left text-white"></i>
                                                    </div>
                                                    <div>
                                                        <h4 class="text-base font-bold text-orange-700 mb-3">Örnek Cümle</h4>
                                                        <p class="text-lg text-gray-800 italic leading-relaxed">
                                                            "@(!string.IsNullOrEmpty(card.ExampleSentence) ? card.ExampleSentence : card.Definition)"
                                                        </p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- Navigation Buttons - Larger -->
                                    <div class="flex justify-between gap-6 mt-8">
                                        <button onclick="prevCard()" 
                                                class="flex-1 bg-gradient-to-r from-gray-100 to-gray-200 text-gray-700 py-4 px-8 rounded-2xl font-bold hover:from-gray-200 hover:to-gray-300 transition-all duration-300 flex items-center justify-center gap-3 shadow-md hover:shadow-lg transform hover:scale-105 text-lg">
                                            <i class="fas fa-chevron-left"></i>
                                            Önceki
                                        </button>
                                        <button onclick="nextCard()" 
                                                class="flex-1 bg-gradient-to-r from-orange-500 to-orange-600 text-white py-4 px-8 rounded-2xl font-bold hover:from-orange-600 hover:to-orange-700 transition-all duration-300 flex items-center justify-center gap-3 shadow-md hover:shadow-lg transform hover:scale-105 text-lg">
                                            Sonraki
                                            <i class="fas fa-chevron-right"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center py-16">
                        <div class="w-28 h-28 mx-auto mb-6 bg-gradient-to-br from-orange-100 to-orange-200 rounded-full flex items-center justify-center shadow-lg">
                            <i class="fas fa-exclamation-triangle text-5xl text-orange-400"></i>
                        </div>
                        <h3 class="text-2xl font-bold text-gray-700 mb-3">Bu derse ait kelime kartı bulunamadı.</h3>
                        <p class="text-lg text-gray-500">Lütfen daha sonra tekrar kontrol edin.</p>
                    </div>
                }
            </div>
            
            <!-- Learned Words Section - Slightly Larger -->
            @if (Model.LearnedWords != null && Model.LearnedWords.Any())
            {
                <div class="mt-10 bg-white/90 backdrop-blur-sm rounded-3xl p-6 shadow-lg border border-orange-100 max-w-6xl mx-auto">
                    <div class="flex items-center gap-4 mb-6">
                        <div class="w-10 h-10 bg-gradient-to-br from-green-500 to-green-600 rounded-2xl flex items-center justify-center shadow-md">
                            <i class="fas fa-trophy text-white"></i>
                        </div>
                        <h2 class="text-xl font-bold text-gray-900">Öğrenilen Kelimeler</h2>
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        @foreach (var item in Model.LearnedWords)
                        {
                            <div class="bg-gradient-to-br from-green-50 to-green-100 rounded-2xl p-4 border border-green-200 shadow-sm hover:shadow-md transition-all duration-300 hover:-translate-y-1">
                                <h4 class="font-bold text-green-800 mb-2 text-lg">@item.WordCard.Word</h4>
                                <p class="text-sm text-green-600 leading-relaxed">@item.WordCard.Definition</p>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
        
        <!-- BÜYÜK OYUN MODAL -->
        <div id="modalOverlay" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 opacity-0 pointer-events-none transition-opacity duration-300"></div>
        
        <div id="gameModal" class="fixed inset-6 bg-white/95 backdrop-blur-sm rounded-3xl z-50 opacity-0 pointer-events-none transition-all duration-300 transform scale-95 shadow-2xl border border-orange-100 overflow-hidden flex flex-col">
            <!-- Modal Header -->
            <div class="bg-gradient-to-r from-orange-500 to-orange-600 p-6 text-white relative overflow-hidden flex-shrink-0">
                <div class="absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full -translate-y-16 translate-x-16"></div>
                <div class="relative z-10">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center gap-4">
                            <div class="w-12 h-12 bg-white/20 rounded-2xl flex items-center justify-center">
                                <i class="fas fa-gamepad text-xl"></i>
                            </div>
                            <div>
                                <h3 id="modalTitle" class="text-2xl font-bold"></h3>
                                <p class="text-orange-100">Kelime ile oyna ve öğren!</p>
                            </div>
                        </div>
                        <div class="bg-white/20 rounded-2xl p-3">
                            <div class="flex items-center gap-2">
                                <i class="fas fa-target"></i>
                                <span>Hedef:</span>
                                <span id="gameWord" class="font-bold bg-white/20 px-3 py-1 rounded-lg"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Game Content - BÜYÜK ALAN -->
            <div class="flex-1 p-6 bg-gray-50 min-h-0">
                <div class="bg-white rounded-2xl shadow-lg overflow-hidden h-full">
                    <iframe id="gameFrame" 
                            class="w-full h-full border-0" 
                            style="min-height: 600px;"
                            sandbox="allow-scripts allow-same-origin allow-forms allow-popups allow-modals">
                    </iframe>
                </div>
            </div>
            
            <!-- Modal Footer -->
            <div class="p-6 bg-white border-t border-gray-200 flex-shrink-0">
                <button id="btnNextGame" class="w-full bg-gradient-to-r from-orange-500 to-orange-600 text-white py-4 px-8 rounded-2xl font-bold hover:from-orange-600 hover:to-orange-700 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105 flex items-center justify-center gap-3">
                    <i class="fas fa-arrow-right"></i>
                    Sonraki Oyun
                </button>
            </div>
        </div>
        
        <!-- BÜYÜK QUIZ MODAL -->
        <div id="quizModal" class="fixed inset-6 bg-white/95 backdrop-blur-sm rounded-3xl z-50 opacity-0 pointer-events-none transition-all duration-300 transform scale-95 shadow-2xl border border-orange-100 overflow-hidden flex flex-col">
            <!-- Quiz Header -->
            <div class="bg-gradient-to-r from-blue-500 to-blue-600 p-6 text-white relative overflow-hidden flex-shrink-0">
                <div class="absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full -translate-y-16 translate-x-16"></div>
                <div class="relative z-10">
                    <div class="flex items-center gap-4">
                        <div class="w-12 h-12 bg-white/20 rounded-2xl flex items-center justify-center">
                            <i class="fas fa-question-circle text-xl"></i>
                        </div>
                        <div>
                            <h3 id="quizTitle" class="text-2xl font-bold">Test Sorusu</h3>
                            <p class="text-blue-100">Bilgini test et!</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Quiz Content -->
            <div class="flex-1 p-8">
                <div class="bg-blue-50 rounded-2xl p-8 mb-8">
                    <div id="quizQuestion" class="text-2xl text-blue-800 font-medium text-center"></div>
                </div>
                <div class="quiz-options space-y-4">
                    <button class="w-full text-left p-6 bg-white hover:bg-orange-50 rounded-2xl transition-all duration-300 border-2 border-gray-200 hover:border-orange-200 shadow-lg hover:shadow-xl transform hover:scale-105 text-lg" data-opt="1" id="quizOpt1"></button>
                    <button class="w-full text-left p-6 bg-white hover:bg-orange-50 rounded-2xl transition-all duration-300 border-2 border-gray-200 hover:border-orange-200 shadow-lg hover:shadow-xl transform hover:scale-105 text-lg" data-opt="2" id="quizOpt2"></button>
                    <button class="w-full text-left p-6 bg-white hover:bg-orange-50 rounded-2xl transition-all duration-300 border-2 border-gray-200 hover:border-orange-200 shadow-lg hover:shadow-xl transform hover:scale-105 text-lg" data-opt="3" id="quizOpt3"></button>
                    <button class="w-full text-left p-6 bg-white hover:bg-orange-50 rounded-2xl transition-all duration-300 border-2 border-gray-200 hover:border-orange-200 shadow-lg hover:shadow-xl transform hover:scale-105 text-lg" data-opt="4" id="quizOpt4"></button>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <link href="https://cdn.jsdelivr.net/npm/izitoast/dist/css/iziToast.min.css" rel="stylesheet"/>
    <script src="https://cdn.jsdelivr.net/npm/izitoast/dist/js/iziToast.min.js"></script>
    <script>
        const studentId = '@studentId';
        const totalCards = @totalCards;
        const lessonId = @Model.Lesson.Id;
        let cardEls = [];
        let currentIndex = 0;
        
        document.addEventListener("DOMContentLoaded", function(){
            initCards();
            document.getElementById("btnNextGame").addEventListener("click", () => {
                completeGame();
            });
            window.addEventListener('message', e => { if(e.data === 'next-game') completeGame(); });
            document.querySelectorAll('#quizModal button').forEach(btn => {
                btn.addEventListener('click', () => {
                    const opt = parseInt(btn.getAttribute('data-opt'));
                    answerQuiz(opt);
                });
            });
        });
        
        function initCards(){
            for (let i = 0; i < totalCards; i++){
                let cardEl = document.getElementById("card" + i);
                if (cardEl) {
                    cardEls.push(cardEl);
                }
            }
            if (cardEls.length > 0) {
                showCard(0);
                updateWordCardProgress(0);
                updateLessonProgress(0);
            } else {
                console.warn("Hiç kart bulunamad��!");
            }
        }
        
        function showCard(index) {
            // Hide all cards
            cardEls.forEach((card, i) => {
                card.classList.remove('opacity-100', 'translate-x-0');
                card.classList.add('opacity-0', 'translate-x-full');
            });
            
            // Show current card
            setTimeout(() => {
                cardEls[index].classList.remove('opacity-0', 'translate-x-full');
                cardEls[index].classList.add('opacity-100', 'translate-x-0');
            }, 150);
            
            updateProgress(index);
            currentIndex = index;
        }
        
        function updateProgress(idx){
            let percent = ((idx + 1) / totalCards) * 100;
            document.getElementById("progressFill").style.width = percent + "%";
            document.getElementById("progressText").textContent = `${idx + 1} / ${totalCards}`;
        }
        
        function nextCard(){
            if (currentIndex === totalCards - 1){
                startGames();
                return;
            }
            if (currentIndex < totalCards - 1){
                showCard(currentIndex + 1);
                updateLessonProgress(currentIndex + 1);
                updateWordCardProgress(currentIndex + 1);
            }
        }
        
        function prevCard(){
            if (currentIndex > 0){
                showCard(currentIndex - 1);
                updateLessonProgress(currentIndex - 1);
                updateWordCardProgress(currentIndex - 1);
            }
        }
        
        const lessonWords = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.WordCards.Select(w => new {id = w.WordCard.Id, word = w.WordCard.Word})));
        const games = [
            {title:"Adam Asmaca", url:"/Student/Games/AdamAsmaca"},
            {title:"Kelime Bulmaca", url:"/Student/Games/KelimeBulmaca"},
            {title:"Görselden Soru", url:"/Student/Games/VisualPrompt"},
            {title:"Kabarcık Harfler", url:"/Student/Games/BubbleLetters"},
            {title:"Çengel Bulmaca", url:"/Student/Games/CrossPuzzle"},
            {title:"Boşluk Doldurma", url:"/Student/Games/FillBlanks"},
            {title:"Eş Yakın Eşleştirme", url:"/Student/Games/SynonymMatch"},
            {title:"Cümle Kurma", url:"/Student/Games/SentenceBuilder"}
        ];
        let gameOrder = [];
        let wordOrder = [];
        let gameIndex = 0;
        let wordIndex = 0;
        
        function startGames(){
            gameOrder = shuffleArray(games.slice());
            wordOrder = shuffleArray(lessonWords);
            gameIndex = 0;
            wordIndex = 0;
            showCurrentGame();
        }
        
        function showCurrentGame(){
            if(gameIndex >= gameOrder.length){
                openQuiz();
                return;
            }
            const game = gameOrder[gameIndex];
            const wordCard = wordOrder[wordIndex];
            document.getElementById('modalTitle').textContent = game.title;
            document.getElementById('gameWord').textContent = wordCard.word;
            document.getElementById('gameFrame').src = game.url + '?embed=1&word=' + encodeURIComponent(wordCard.word) + '&id=' + wordCard.id;
            
            // Show modal
            const overlay = document.getElementById('modalOverlay');
            const modal = document.getElementById('gameModal');
            overlay.classList.remove('opacity-0', 'pointer-events-none');
            overlay.classList.add('opacity-100');
            modal.classList.remove('opacity-0', 'pointer-events-none', 'scale-95');
            modal.classList.add('opacity-100', 'scale-100');
        }
        
        function completeGame(){
            // Hide modal
            const overlay = document.getElementById('modalOverlay');
            const modal = document.getElementById('gameModal');
            overlay.classList.add('opacity-0', 'pointer-events-none');
            overlay.classList.remove('opacity-100');
            modal.classList.add('opacity-0', 'pointer-events-none', 'scale-95');
            modal.classList.remove('opacity-100', 'scale-100');
            
            wordIndex++;
            if(wordIndex >= wordOrder.length){
                wordIndex = 0;
                gameIndex++;
            }
            showCurrentGame();
        }
        
        let quizQuestions = [];
        let quizIndex = 0;
        let quizCorrect = 0;
        
        async function openQuiz(){
            const res = await fetch(`http://localhost:5001/api/wordcards/lessons/${lessonId}/testquestions`);
            if(!res.ok){ finishCourse(); return; }
            const qs = await res.json();
            if(!qs || qs.length === 0){ finishCourse(); return; }
            const max = Math.max(1, Math.floor(totalCards / 2));
            quizQuestions = shuffleArray(qs).slice(0, max);
            quizIndex = 0;
            quizCorrect = 0;
            showQuizQuestion();
        }
        
        function showQuizQuestion(){
            if(quizIndex >= quizQuestions.length){
                closeQuiz();
                return;
            }
            const q = quizQuestions[quizIndex];
            document.getElementById('quizQuestion').textContent = q.questionText;
            document.getElementById('quizOpt1').textContent = q.optionA;
            document.getElementById('quizOpt2').textContent = q.optionB;
            document.getElementById('quizOpt3').textContent = q.optionC;
            document.getElementById('quizOpt4').textContent = q.optionD;
            
            // Show quiz modal
            const overlay = document.getElementById('modalOverlay');
            const modal = document.getElementById('quizModal');
            overlay.classList.remove('opacity-0', 'pointer-events-none');
            overlay.classList.add('opacity-100');
            modal.classList.remove('opacity-0', 'pointer-events-none', 'scale-95');
            modal.classList.add('opacity-100', 'scale-100');
        }
        
        function answerQuiz(opt){
            const q = quizQuestions[quizIndex];
            if(opt === q.correctOption) quizCorrect++;
            quizIndex++;
            showQuizQuestion();
        }
        
        function closeQuiz(){
            // Hide quiz modal
            const overlay = document.getElementById('modalOverlay');
            const modal = document.getElementById('quizModal');
            overlay.classList.add('opacity-0', 'pointer-events-none');
            overlay.classList.remove('opacity-100');
            modal.classList.add('opacity-0', 'pointer-events-none', 'scale-95');
            modal.classList.remove('opacity-100', 'scale-100');
            
            const payload = {studentId, lessonId, totalQuestions: quizQuestions.length, correctAnswers: quizCorrect, score: quizCorrect * 10};
            Promise.all([
                fetch('http://localhost:5001/api/gamestats/record', {
                    method:'POST',
                    headers:{'Content-Type':'application/json'},
                    body: JSON.stringify({studentId, gameId:-1, score: quizCorrect*10, durationSeconds:0})
                }),
                fetch('http://localhost:5001/api/quizresults/record', {
                    method:'POST',
                    headers:{'Content-Type':'application/json'},
                    body: JSON.stringify(payload)
                })
            ]).finally(() => finishCourse());
        }
        
        function shuffleArray(arr){
            for(let i = arr.length -1; i>0; i--){
                const j = Math.floor(Math.random()* (i+1));
                [arr[i], arr[j]] = [arr[j], arr[i]];
            }
            return arr;
        }
        
        function finishCourse(){
            showIziToastSuccess("Tebrikler, dersi tamamladınız!");
            setTimeout(() => {
                window.location = 'http://localhost:5015/Student/MyCourses';
            }, 2000);
        }
        
        function updateWordCardProgress(cardIndex) {
            if(cardIndex < 0 || cardIndex >= totalCards) return;
            const cardEl = cardEls[cardIndex];
            const wordCardId = cardEl.getAttribute("data-wordcard-id");
            const payload = {
                StudentId: studentId,
                WordCardId: parseInt(wordCardId),
                LessonId: lessonId,
                IsLearned: true,
                ResponseTimeSeconds: 2.5
            };
            fetch('http://localhost:5001/api/progress/wordcards/update', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            })
            .then(response => {
                if (response.status === 404) {
                    return fetch('http://localhost:5001/api/progress/wordcards/create', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });
                }
                if (!response.ok) throw new Error("Kelime kartı ilerlemesi güncellenemedi.");
                return response.json();
            })
            .then(data => {
                console.log("Kelime kartı ilerlemesi:", data);
            })
            .catch(error => {
                console.error("Kelime kartı ilerlemesi hatası:", error);
                showIziToastError("Kelime kartı ilerlemesi güncellenemedi.");
            });
        }
        
        function updateLessonProgress(cardIndex) {
            let completion = ((cardIndex + 1) / totalCards) * 100;
            const payload = {
                StudentId: studentId,
                LessonId: lessonId,
                LearnedWordCardsCount: cardIndex + 1,
                CompletionPercentage: completion,
                TotalAttempts: cardIndex + 1,
                TotalTimeSpentSeconds: (cardIndex + 1) * 3
            };
            fetch('http://localhost:5001/api/progress/lessons/update', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            })
            .then(response => {
                if (response.status === 404) {
                    return fetch('http://localhost:5001/api/progress/lessons/create', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });
                }
                if (!response.ok) throw new Error("Ders ilerlemesi güncellenemedi.");
                return response.json();
            })
            .then(data => {
                console.log("Ders ilerlemesi:", data);
            })
            .catch(error => {
                console.error("Ders ilerlemesi hatası:", error);
                showIziToastError("Ders ilerlemesi güncellenemedi.");
            });
        }
        
        function showIziToastSuccess(message) {
            iziToast.show({
                title: 'Başarılı!',
                message: message,
                position: 'topRight',
                theme: 'light',
                color: 'green',
                timeout: 4000,
                icon: 'fa-solid fa-circle-check',
                transitionIn: 'fadeInDown',
                transitionOut: 'fadeOutUp',
                closeOnClick: true,
                progressBar: false
            });
        }
        
        function showIziToastError(message) {
            iziToast.show({
                title: 'Hata!',
                message: message,
                position: 'topRight',
                theme: 'light',
                color: 'red',
                timeout: 5000,
                icon: 'fa-solid fa-triangle-exclamation',
                transitionIn: 'fadeInDown',
                transitionOut: 'fadeOutUp',
                closeOnClick: true,
                progressBar: false
            });
        }
    </script>
}

<style>
.kelime-card {
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
}
</style>
