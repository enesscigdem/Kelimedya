@using System.Security.Claims
@{
    bool embed     = Context.Request.Query.ContainsKey("embed");
    string singleWord = Context.Request.Query["word"];
    string wordId     = Context.Request.Query["id"];
    Layout = embed
      ? "~/Areas/Student/Views/Shared/_GameLayout.cshtml"
      : "~/Areas/Student/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Eş Yakın Eşleştirme";
    var studentId = User.FindFirstValue(ClaimTypes.NameIdentifier);
}
<link href="~/css/SynonymMatch.css" rel="stylesheet"/>

<div id="gameRoot" class="gb-container container-xl"
     data-student-id="@studentId"
     data-game-id="@ViewData["GameId"]"
     data-word="@singleWord"
     data-word-id="@wordId"
     data-embed="@embed.ToString().ToLower()">

  <header class="gb-header">
    <h2>Eş Yakın Eşleştirme</h2>
    <div class="gb-progress">
      <div class="gb-progress-bar" style="width:100%"></div>
    </div>
  </header>

  <div class="gb-gamecard sm-gamecard">
    <div class="sm-game-area">
      <div id="leftColumn"  class="sm-column"></div>
      <div id="rightColumn" class="sm-column"></div>
    </div>

    @if(!embed)
    {
      <div class="gb-controls sm-endgame">
        <button id="smEndGame" class="btn-primary"
                data-home="@Url.Action("Index","Games", new { area="Student" })">
          Oyunu Sonlandır
        </button>
      </div>
    }
  </div>
</div>

@section Scripts {
  <script type="module">
    import {initSynonymMatch} from '@Url.Content("~/js/games/SynonymMatch.js")';
    const root = document.getElementById('gameRoot');
    initSynonymMatch(
      root.dataset.studentId,
      root.dataset.gameId,
      root.dataset.word,
      root.dataset.wordId
    );
  </script>
}
