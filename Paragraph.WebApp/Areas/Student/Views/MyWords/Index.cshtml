@model Paragraph.WebApp.Areas.Student.Models.MyWordsViewModel

@{
    Layout = "~/Areas/Student/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Kelime Kartlarım - Ultra Profesyonel Tasarım";
}

<link href="~/css/myWords.css" rel="stylesheet" />

<div class="words-container">
    <!-- Pulsing Daireler (arka plan dekoru) -->
    <div class="pulse-circle"></div>
    <div class="pulse-circle"></div>

    <!-- Başlık & Alt Açıklama -->
    <header class="header-area">
        <h1 class="words-hero">Kelime Kartlarım</h1>
        <p class="words-sub">
            Ezberlediğin kelimeleri, modern tasarımla bir arada gör. Yeni kelimeler ekleyip, başarılarını takip et!
        </p>
    </header>

    <!-- İstatistik Kartları -->
    <section class="stats-row">
        <div class="stat-card">
            <div class="stat-label">Toplam Kart</div>
            <div class="stat-value">@Model.LearnedWords.Count</div>
        </div>
        <div class="stat-card">
            <div class="stat-label">Ezberlenen</div>
            <div class="stat-value green">@Model.LearnedWords.Where(x => x.Progress.IsLearned).Count()</div>
        </div>
        <div class="stat-card">
            <div class="stat-label">Bugün Çalışılan</div>
            <div class="stat-value orange">
                @Model.LearnedWords.Where(x => x.Progress.LastSeenDate.GetValueOrDefault().Date == DateTime.Now.Date).Count()
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-label">Gösterim Sayısı</div>
            <div class="stat-value">@Model.LearnedWords.Sum(x => x.Progress.ViewCount)</div>
        </div>
    </section>

    <!-- Araçlar: Arama, Filtre, Sırala, Yeni Kart -->
    <div class="tools">
        <input type="text" placeholder="Kelime ara…" id="searchInput" />
        <button class="ultra-btn" id="filterBtn">Filtrele</button>
        <button class="ultra-btn" id="sortBtn">Sırala</button>
        <a href="#" class="ultra-btn secondary" style="margin-left:auto;">Yeni Kart Ekle</a>
    </div>

    <!-- Kelime Kartları Grid (Ezberlenen Kelimeler) -->
    <section class="cards-grid" id="cardsGrid">
        @if(Model.LearnedWords != null && Model.LearnedWords.Any())
        {
            @foreach (var item in Model.LearnedWords)
            {
                <div class="word-card">
                    <div class="word-card-inner">
                        <!-- Resim Alanı -->
                        <div class="card-image">
                            <img src="@( !string.IsNullOrEmpty(item.WordCard.ImageUrl) ? item.WordCard.ImageUrl : Url.Content("https://flowbite.com/docs/images/examples/image-1@2x.jpg") )" alt="@item.WordCard.Word" />
                        </div>
                        <!-- Kart İçeriği: Ön Yüz -->
                        <div class="card-front">
                            <h2 class="word-title">@item.WordCard.Word</h2>
                            <p class="word-description">@item.WordCard.Definition</p>
                            <div class="progress-badge">Gösterim: @(item.Progress?.ViewCount ?? 0)</div>
                        </div>
                        <!-- Kart İçeriği: Arka Yüz -->
                        <div class="card-back">
                            <p class="meaning">@item.WordCard.Definition</p>
                            <p class="example">“@item.WordCard.ExampleSentence”</p>
                            <p class="synonyms">Eş Anlam: <strong>@(item.WordCard.Definition ?? "Bilinmiyor")</strong></p>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="no-words">
                <h3>Henüz ezberlenen kelime kartınız bulunmamaktadır.</h3>
            </div>
        }
    </section>
</div>

@section Scripts {
    <script>
        // Filtreleme ve sıralama için
        const searchInput = document.getElementById("searchInput");
        const filterBtn = document.getElementById("filterBtn");
        const sortBtn = document.getElementById("sortBtn");
        const cardsGrid = document.getElementById("cardsGrid");
        let sortAsc = true;
        
        function filterCards() {
            const searchTerm = searchInput.value.toLowerCase();
            const cards = cardsGrid.getElementsByClassName("word-card");
            for (let card of cards) {
                const wordTitleElem = card.querySelector(".word-title");
                if (wordTitleElem) {
                    const word = wordTitleElem.textContent.toLowerCase();
                    card.style.display = word.includes(searchTerm) ? "" : "none";
                }
            }
        }
        
        function sortCards() {
            const cardsArray = Array.from(cardsGrid.getElementsByClassName("word-card"));
            cardsArray.sort((a, b) => {
                const wordA = a.querySelector(".word-title").textContent.trim().toLowerCase();
                const wordB = b.querySelector(".word-title").textContent.trim().toLowerCase();
                return sortAsc ? wordA.localeCompare(wordB) : wordB.localeCompare(wordA);
            });
            cardsArray.forEach(card => cardsGrid.appendChild(card));
            sortAsc = !sortAsc;
        }
        
        searchInput.addEventListener("input", filterCards);
        filterBtn.addEventListener("click", filterCards);
        sortBtn.addEventListener("click", sortCards);
    </script>
}
